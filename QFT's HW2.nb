(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     58743,       1228]
NotebookOptionsPosition[     12288,        367]
NotebookOutlinePosition[     56651,       1204]
CellTagsIndexPosition[     56608,       1201]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"here", " ", "the", " ", "matA", " ", "is", " ", "the", " ", 
  "Matrix", " ", "M", " ", "in", " ", "my", " ", "homework", " ", "and", " ", 
  "matB", " ", "is", " ", "the", " ", "matrix", " ", 
  RowBox[{"M", "^", 
   RowBox[{"-", "1"}]}], " ", "in", " ", "my", " ", 
  RowBox[{"HW", "."}]}]], "Item",
 CellChangeTimes->{{3.8738820987814302`*^9, 3.873882255767379*^9}, {
  3.873882344598425*^9, 3.873882347319771*^9}, {3.8738824988799353`*^9, 
  3.8738825005499887`*^9}, {3.873882553068841*^9, 3.873882588226557*^9}, {
  3.873882863858087*^9, 3.873882865560264*^9}, {3.873883210747517*^9, 
  3.873883235614173*^9}, {3.8738847552889423`*^9, 3.8738847606222763`*^9}, {
  3.8738856897658367`*^9, 3.873885923548503*^9}, {3.873885990280397*^9, 
  3.873886065636991*^9}},ExpressionUUID->"3df710d1-a80d-457e-8fd6-\
7caad1b0c7fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"matC", " ", 
   RowBox[{"is", " ", "\\", "bar"}], 
   RowBox[{"{", "M", "}"}], " ", "and", " ", "matD", " ", 
   RowBox[{"is", " ", "\\", "bar"}], 
   RowBox[{
    RowBox[{"{", "M", "}"}], "^", 
    RowBox[{"-", "1"}]}]}], "\[IndentingNewLine]"}]], "Item",
 CellChangeTimes->{{3.8738820987814302`*^9, 3.873882255767379*^9}, {
  3.873882344598425*^9, 3.873882347319771*^9}, {3.8738824988799353`*^9, 
  3.8738825005499887`*^9}, {3.873882553068841*^9, 3.873882588226557*^9}, {
  3.873882863858087*^9, 3.873882865560264*^9}, {3.873883210747517*^9, 
  3.873883235614173*^9}, {3.8738847552889423`*^9, 3.8738847606222763`*^9}, {
  3.8738856897658367`*^9, 3.873885923548503*^9}, {3.873885990280397*^9, 
  3.87388610199125*^9}},ExpressionUUID->"dd98e3bf-e832-4a7a-951c-\
39f4849f8030"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"p", "=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{
     SuperscriptBox["p1", "2"], "+", 
     SuperscriptBox["p2", "2"], "+", 
     SuperscriptBox["p3", "2"]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Cofficience", "=", 
   RowBox[{"Sqrt", "[", 
    RowBox[{
     RowBox[{"2", 
      RowBox[{"p", "^", "2"}]}], "-", 
     RowBox[{"2", "p", "*", "p3"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matA", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "p1"}], "-", 
         RowBox[{"I", "*", "p2"}]}], ",", 
        RowBox[{"p3", "-", "p"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p", "-", "p3"}], ",", 
        RowBox[{
         RowBox[{"-", "p1"}], "+", 
         RowBox[{"I", "*", "p2"}]}]}], "}"}]}], "}"}], "/", "Cofficience"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matB", "=", 
   RowBox[{"Inverse", "[", "matA", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"diag", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Ea", "+", "p"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Ea", "-", "p"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"sqrtdiag", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Sqrt", "[", 
        RowBox[{"Ea", "+", "p"}], "]"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"Sqrt", "[", 
        RowBox[{"Ea", "-", "p"}], "]"}]}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matC", "=", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p3", "-", "p"}], ",", 
        RowBox[{"p1", "-", 
         RowBox[{"I", "*", "p2"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"p1", "+", 
         RowBox[{"I", "*", "p2"}]}], ",", 
        RowBox[{"p", "-", "p3"}]}], "}"}]}], "}"}], "/", "Cofficience"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"matD", "=", 
   RowBox[{"Inverse", "[", "matC", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SG0", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SG1", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SG2", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "I"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"I", ",", "0"}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SG3", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}]}], "Input",
 CellLabel->
  "In[236]:=",ExpressionUUID->"0136ef1a-5250-4669-b8a9-d7c7f624f965"],

Cell[BoxData[""], "Input",
 CellLabel->
  "In[248]:=",ExpressionUUID->"0ab9443a-d971-4f13-b48f-58950c527810"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
   "matD", ".", "sqrtdiag", ".", "matC", ".", "SG0", ".", "matD", ".", 
    "sqrtdiag", ".", "matC"}], "+", 
   RowBox[{
   "matB", ".", "sqrtdiag", ".", "matA", ".", "SG0", ".", "matB", ".", 
    "sqrtdiag", ".", "matA"}]}], "//", 
  "FullSimplify"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "matD", ".", "sqrtdiag", ".", "matC", ".", "SG1", ".", "matD", ".", 
    "sqrtdiag", ".", "matC"}], "-", 
   RowBox[{
   "matB", ".", "sqrtdiag", ".", "matA", ".", "SG1", ".", "matB", ".", 
    "sqrtdiag", ".", "matA"}]}], "//", 
  "FullSimplify"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "matD", ".", "sqrtdiag", ".", "matC", ".", "SG2", ".", "matD", ".", 
    "sqrtdiag", ".", "matC"}], "-", 
   RowBox[{
   "matB", ".", "sqrtdiag", ".", "matA", ".", "SG2", ".", "matB", ".", 
    "sqrtdiag", ".", "matA"}]}], "//", 
  "FullSimplify"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
   "matD", ".", "sqrtdiag", ".", "matC", ".", "SG3", ".", "matD", ".", 
    "sqrtdiag", ".", "matC"}], "-", 
   RowBox[{
   "matB", ".", "sqrtdiag", ".", "matA", ".", "SG3", ".", "matB", ".", 
    "sqrtdiag", ".", "matA"}]}], "//", "FullSimplify"}]}], "Input",
 CellLabel->
  "In[249]:=",ExpressionUUID->"88b9311e-8635-497f-be12-58aadc1d3a2e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"2", " ", "Ea"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"2", " ", "Ea"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.873886585238809*^9},
 CellLabel->
  "Out[249]=",ExpressionUUID->"cb2b2222-52b6-4d91-bb50-6fa9a545dfe0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "p1"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "p1"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.87388658524984*^9},
 CellLabel->
  "Out[250]=",ExpressionUUID->"3b752ce7-875e-4e5a-ad33-c1f0eba42fb3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "p2"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "p2"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.873886585251216*^9},
 CellLabel->
  "Out[251]=",ExpressionUUID->"b30b2791-784d-40f1-8f11-aa784abece4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "2"}], " ", "p3"}], ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      RowBox[{"-", "2"}], " ", "p3"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.873886585252268*^9},
 CellLabel->
  "Out[252]=",ExpressionUUID->"b66c085c-ceb8-4af2-9f0a-0d051e5e7929"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873882110016865*^9, 3.873882113109077*^9}, {
   3.8738825052628117`*^9, 3.8738825161114597`*^9}, {3.873882630449353*^9, 
   3.873882642859756*^9}, 3.87388602186018*^9, {3.873886109572699*^9, 
   3.873886132623045*^9}, 3.8738865289048977`*^9},
 CellLabel->
  "In[253]:=",ExpressionUUID->"9ebfcc53-227f-4b28-9141-9904b847e197"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873882615682445*^9, 3.873882665759914*^9}, {
   3.8738832471914253`*^9, 3.873883252028277*^9}, 3.873886153440282*^9},
 CellLabel->
  "In[254]:=",ExpressionUUID->"127a04a3-af57-4b25-be91-af2ebc335dec"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8738827069376183`*^9, 3.873882795511633*^9}, {
   3.873883269208272*^9, 3.873883271572588*^9}, 3.873886149949888*^9},
 CellLabel->
  "In[255]:=",ExpressionUUID->"93876924-ce9d-44c0-9abb-31b5015da5fb"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8738828365561037`*^9, 3.873882920819079*^9}, 
   3.873886171444024*^9},
 CellLabel->
  "In[256]:=",ExpressionUUID->"649d98c4-8e72-4d8a-93b8-75cafec33ae7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873882925888857*^9, 3.8738829459839773`*^9}, {
   3.8738829920901403`*^9, 3.87388305000531*^9}, {3.8738862325252047`*^9, 
   3.873886332946801*^9}, 3.8738865472723427`*^9},
 CellLabel->
  "In[257]:=",ExpressionUUID->"739480e9-16d0-4bbe-a06f-69513c10ba0b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873883067022778*^9, 3.873883086705782*^9}, {
   3.87388328656352*^9, 3.873883290613143*^9}, 3.873886367634934*^9},
 CellLabel->
  "In[258]:=",ExpressionUUID->"237cc06d-2dae-46e4-af24-919af8c3bde5"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873883143747233*^9, 3.8738831791540413`*^9}, {
   3.8738833045496187`*^9, 3.873883358235526*^9}, 3.873886372107486*^9},
 CellLabel->
  "In[259]:=",ExpressionUUID->"6fc3bba2-d4e7-4574-a9af-5da6fc7f635b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873884152838401*^9, 3.873884200916205*^9}, {
   3.873884254258073*^9, 3.8738843047300158`*^9}, 3.873886364447955*^9},
 CellLabel->
  "In[260]:=",ExpressionUUID->"20344c2a-4e13-47c9-91bb-2368d78b8794"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873883370649692*^9, 3.87388340241396*^9}, {
   3.873884023733152*^9, 3.873884037201436*^9}, {3.8738850721654177`*^9, 
   3.873885101961815*^9}, 3.87388636082584*^9},
 CellLabel->
  "In[261]:=",ExpressionUUID->"1350874b-58d2-4cc4-905b-077933c01ace"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.87388342033302*^9, 3.873883536136862*^9}, {
  3.87388404207965*^9, 3.87388404664894*^9}, {3.873884113094089*^9, 
  3.8738841141864033`*^9}, {3.873884572657439*^9, 3.873884577657598*^9}, {
  3.8738848602854767`*^9, 3.873884878405527*^9}, {3.873885104977449*^9, 
  3.873885122575651*^9}, {3.8738863546412783`*^9, 3.8738863573608513`*^9}},
 CellLabel->
  "In[262]:=",ExpressionUUID->"a7c5113f-b397-4caf-8932-9a1b4d64404e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8738835103431463`*^9, 3.873883521436429*^9}, 
   3.8738863508934937`*^9},
 CellLabel->
  "In[263]:=",ExpressionUUID->"12e1af44-33c0-4205-8ba0-78b30bae9761"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8738836763587303`*^9, 3.873883853205941*^9}, 
   3.87388485070277*^9, 3.873886348626479*^9},
 CellLabel->
  "In[264]:=",ExpressionUUID->"b61d9569-9274-432b-a458-716b30684a1c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.873884645003006*^9, 3.873884676116906*^9}, 
   3.873886344841815*^9},
 CellLabel->
  "In[265]:=",ExpressionUUID->"8b6444c2-5155-4d83-a880-7d48e5299b50"]
}, Open  ]],

Cell["", "Item",
 CellChangeTimes->{{3.8738860028084517`*^9, 3.87388600534208*^9}, 
   3.8738861892226152`*^9},ExpressionUUID->"c2f7f96b-e6ef-4912-9961-\
b7089a768173"]
},
WindowSize->{886, 822},
WindowMargins->{{69, Automatic}, {45, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    DynamicModuleBox[{LinterUIDockedCell`Private`notebook$$}, 
     GraphicsBox[{
       InsetBox[
        TemplateBox[{
          PaneBox[
           StyleBox[
           "\"Code Analysis\"", FontColor -> GrayLevel[0.4], FontFamily -> 
            "Source Sans Pro", FontWeight -> Plain, FontSize -> 13, 
            StripOnInput -> False], 
           BaselinePosition -> (Baseline -> Scaled[0.65])], 
          TemplateBox[{8}, "Spacer1"], 
          PaneBox[
           
           PaneSelectorBox[{{False, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, False} -> 
             TemplateBox[{0}, "Spacer1"], {True, True} -> PaneBox[
               InterpretationBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "PercolateAnimator"][Medium]], 
                ProgressIndicator[Appearance -> "Percolate"], 
                BaseStyle -> {"Deploy"}], BaselinePosition -> Scaled[0.05]], {
              False, True} -> 
             DynamicModuleBox[{
               CodeInspector`LinterUI`Private`tracker$$ = 
                CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts}, 
               DynamicWrapperBox[
                DynamicBox[
                 ToBoxes[
                 CodeInspector`LinterUI`Private`tracker$$; 
                  LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
                   LinterUIDockedCell`Private`notebook$$], TraditionalForm], 
                 TrackedSymbols :> {
                  CodeInspector`LinterUI`Private`tracker$$}], 
                If[
                CodeInspector`LinterUI`Private`tracker$$ =!= 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts, CodeInspector`LinterUI`Private`tracker$$ = 
                 CodeInspector`LinterUI`Private`DynamicTriggers`\
dockedCellLintCounts]], DynamicModuleValues :> {}]}, 
            Dynamic[FEPrivate`EvaluatorStatus["Local"]; {
               CodeInspector`LinterUI`Private`varValue[
               LinterUIDockedCell`Private`notebook$$, "AnalysisInProgressQ"], 
               
               TrueQ[
                CodeInspector`LinterUI`Private`varValue[
                LinterUIDockedCell`Private`notebook$$, 
                 "DockedCellPresentQ"]]}], ImageSize -> Automatic], 
           BaselinePosition -> Scaled[0.15]]}, "Row", 
         DisplayFunction -> (PaneBox[
           RowBox[{
             TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
           Baseline]& ), InterpretationFunction -> (RowBox[{"Row", "[", 
            RowBox[{
              RowBox[{"{", 
                TemplateSlotSequence[1, ","], "}"}], ",", 
              RowBox[{"Alignment", "\[Rule]", "Baseline"}]}], "]"}]& )], 
        Offset[{8, 0}, {-1, 0}], {-1, 0}], 
       InsetBox[
        PaneSelectorBox[{
         True -> DynamicModuleBox[{
            CodeInspector`LinterUI`Private`hoverQ$$ = False, 
             CodeInspector`LinterUI`Private`mouseDownQ$$ = False, 
             CodeInspector`LinterUI`Private`fontColor$$}, 
            ButtonBox[
             DynamicWrapperBox[
              TemplateBox[{
                DynamicWrapperBox[
                 StyleBox[
                  PaneBox[
                  "\"Reanalyze Notebook\"", ContentPadding -> True, 
                   FrameMargins -> None, BaselinePosition -> Baseline], 
                  FontColor -> 
                  Dynamic[CodeInspector`LinterUI`Private`fontColor$$], 
                  FontColor -> GrayLevel[0.2], FontFamily -> 
                  "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
                  StripOnInput -> False], 
                 CodeInspector`LinterUI`Private`fontColor$$ = Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextInactiveColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "TextColor"]]], ContentPadding -> False, 
                FrameMargins -> {{9, 9}, {0, 0}}, 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 19}, 
                RoundingRadius -> 3, FrameStyle -> Dynamic[
                  Directive[
                   AbsoluteThickness[0.5], 
                   Which[
                    TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeInactiveColor"], 
                    CodeInspector`LinterUI`Private`hoverQ$$, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeHoverColor"], True, 
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "EdgeColor"]]]], Background -> Dynamic[
                  Which[
                   TrueQ[
                    Not[
                    
                    OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "ActiveQ"]]], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackInactiveColor"], 
                   And[
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                    CodeInspector`LinterUI`Private`mouseDownQ$$], 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackMouseDownColor"], 
                   CodeInspector`LinterUI`Private`hoverQ$$, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackHoverColor"], True, 
                   
                   OptionValue[{
                    ImageSize -> {Automatic, 19}, 
                    FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                    Baseline, Alignment -> {Center, Center}, Method -> 
                    "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                    "TextHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextHover"], "TextInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonTextInactive"], "BackColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                    "BackHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackHover"], "BackMouseDownColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackMouseDown"], "BackInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonBackInactive"], "EdgeColor" -> 
                    CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                    "EdgeHoverColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeHover"], "EdgeInactiveColor" -> 
                    CodeInspector`LinterUI`Private`colorData[
                    "ButtonEdgeInactive"]}, {Method -> "Queued"}, 
                    "BackColor"]]]}, "Highlighted"], 
              CodeInspector`LinterUI`Private`hoverQ$$ = 
               CurrentValue["MouseOver"]; 
              CodeInspector`LinterUI`Private`mouseDownQ$$ = 
               CurrentValue["MouseButtonTest"]], Appearance -> None, 
             BaselinePosition -> Baseline, ButtonFunction :> 
             If[OptionValue[{
                 ImageSize -> {Automatic, 19}, 
                  FrameMargins -> {9 {1, 1}, 0 {1, 1}}, BaselinePosition -> 
                  Baseline, Alignment -> {Center, Center}, Method -> 
                  "Preemptive", "ActiveQ" -> True, "TextColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonText"], 
                  "TextHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonTextHover"],
                   "TextInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonTextInactive"], "BackColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonBack"], 
                  "BackHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonBackHover"],
                   "BackMouseDownColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonBackMouseDown"], "BackInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonBackInactive"], "EdgeColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonEdge"], 
                  "EdgeHoverColor" -> 
                  CodeInspector`LinterUI`Private`colorData["ButtonEdgeHover"],
                   "EdgeInactiveColor" -> 
                  CodeInspector`LinterUI`Private`colorData[
                   "ButtonEdgeInactive"]}, {Method -> "Queued"}, "ActiveQ"] =!= 
               False, 
               CodeInspector`LinterUI`Private`attachAnalysisAction[
                EvaluationNotebook[]]], ContentPadding -> False, Evaluator -> 
             Automatic, Method -> "Queued"], DynamicModuleValues :> {}], 
          False -> ButtonBox[
            TemplateBox[{
              StyleBox[
              "\"Analyze Notebook\"", FontColor -> GrayLevel[0.2], FontFamily -> 
               "Source Sans Pro", FontWeight -> Plain, FontSize -> 14, 
               StripOnInput -> False], ImageSize -> {Automatic, 19}, 
              FrameMargins -> {{9, 9}, {0, 0}}, BaselinePosition -> Baseline, 
              Alignment -> {Center, Center}, Background -> GrayLevel[1], 
              FrameStyle -> Dynamic[
                If[
                 CurrentValue["MouseOver"], 
                 Hue[0.55, 0.82, 0.87], 
                 GrayLevel[0.8]]]}, "Highlighted"], Appearance -> False, 
            ButtonFunction :> (CurrentValue[
                EvaluationNotebook[], DockedCells] = 
              With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                   EvaluationNotebook[], DockedCells]}, 
                Pick[LinterUIDockedCell`Private`dockedCells, 
                 Map[Quiet[
                    Options[#, CellTags]] =!= {
                   CellTags -> "CodeAnalysisDockedCell"}& , 
                  LinterUIDockedCell`Private`dockedCells]]]; 
             Needs["CodeInspector`"]; 
             CodeInspector`AttachAnalysis[
              LinterUIDockedCell`Private`notebook$$]), Evaluator -> Automatic,
             Method -> "Queued"]}, 
         Dynamic[FEPrivate`EvaluatorStatus["Local"]; TrueQ[
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"]]], 
         ImageSize -> Automatic], 
        Offset[{-26, 0}, {1, 0}], {1, 0}], 
       TagBox[
        TagBox[
         TooltipBox[{{
            GrayLevel[0.6], 
            DiskBox[
             Offset[{-11, 0}, {1, 0}], 
             Offset[6]]}, {
            GrayLevel[0.97], 
            AbsoluteThickness[1.5], 
            CapForm["Round"], 
            LineBox[{{
               Offset[{-13, 2}, {1, 0}], 
               Offset[{-9, -2}, {1, 0}]}, {
               Offset[{-13, -2}, {1, 0}], 
               Offset[{-9, 2}, {1, 0}]}}]}}, "\"Close analysis\"", 
          TooltipDelay -> 0, TooltipStyle -> "TextStyling"], 
         Annotation[#, "Close analysis", "Tooltip"]& ], 
        EventHandlerTag[{"MouseClicked" :> (Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "UIAttachedCells"]]]; Map[NotebookDelete, 
             Flatten[
              CodeInspector`LinterUI`Private`varValue[
              LinterUIDockedCell`Private`notebook$$, All, 
               "CleanCellBracketMarker"]]]; CurrentValue[
              EvaluationNotebook[], DockedCells] = 
            With[{LinterUIDockedCell`Private`dockedCells = CurrentValue[
                 EvaluationNotebook[], DockedCells]}, 
              Pick[LinterUIDockedCell`Private`dockedCells, 
               Map[Quiet[
                  Options[#, CellTags]] =!= {
                 CellTags -> "CodeAnalysisDockedCell"}& , 
                LinterUIDockedCell`Private`dockedCells]]]; 
           CodeInspector`LinterUI`Private`applyToVar[Remove, {
              EvaluationNotebook[], All}]; 
           CodeInspector`LinterUI`Private`varSet[{
             LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, 
             False]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, AspectRatio -> Full, 
      ImageSize -> {Full, 23}, PlotRange -> {{-1, 1}, {-1, 1}}], 
     Deinitialization :> 
     CodeInspector`LinterUI`Private`varSet[{
       LinterUIDockedCell`Private`notebook$$, "DockedCellPresentQ"}, False], 
     DynamicModuleValues :> {}, 
     Initialization :> ({
       LinterUIDockedCell`Private`dockedCellSeverityCountsButton[
          Pattern[LinterUIDockedCell`Private`notebook, 
           Blank[NotebookObject]]] := 
        With[{LinterUIDockedCell`Private`formatIcon = 
           Show[#, ImageSize -> {13, 9}, BaselinePosition -> Scaled[-0.2]]& }, 
          ActionMenu[
           Highlighted[
            Row[{
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`notebook, "exclamSize" -> 12, 
               FontSize -> 14, FontWeight -> Plain], 
              Spacer[2], 
              LinterUIDockedCell`Private`formatIcon[
               CodeInspector`LinterUI`Private`iconData["DownChevron"][
                CodeInspector`LinterUI`Private`colorData["UIDark"]]]}], 
            ImageSize -> {Automatic, 19}, BaselinePosition -> Baseline, 
            Background -> White, Frame -> True, FrameStyle -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               Hue[0.55, 0.82, 0.87], 
               GrayLevel[0.8]]], FrameMargins -> {6 {1, 1}, {1, 1}}, 
            Alignment -> {Center, Baseline}], 
           Map[LinterUIDockedCell`Private`dockedCellMenuItem, 
            CodeInspector`LinterUI`Private`varValue[
            LinterUIDockedCell`Private`notebook, All, "Cell"]], Appearance -> 
           None]], LinterUIDockedCell`Private`dockedCellMenuItem[
          Pattern[LinterUIDockedCell`Private`cell, 
           Blank[CellObject]]] := With[{}, Graphics[{
             Inset[
              With[{LinterUIDockedCell`Private`expressionString = First[
                  FrontEndExecute[
                   FrontEnd`ExportPacket[
                    First[
                    CodeInspector`LinterUI`Private`varValue[
                    LinterUIDockedCell`Private`cell, "CellContents"]], 
                    "InputText"]]]}, {
               LinterUIDockedCell`Private`noLineBreaks = 
                StringReplace[
                 LinterUIDockedCell`Private`expressionString, "\n" -> " "]}, {
               LinterUIDockedCell`Private`previewString = 
                StringTake[LinterUIDockedCell`Private`noLineBreaks, {1, 
                   UpTo[LinterUIDockedCell`Private`$previewLength]}]}, 
               CodeInspector`LinterUI`Private`styleData["FixedWidth"][
                If[
                StringLength[LinterUIDockedCell`Private`expressionString] > 
                 LinterUIDockedCell`Private`$previewLength, 
                 StringDrop[LinterUIDockedCell`Private`previewString, -1] <> 
                 "\[Ellipsis]", 
                 LinterUIDockedCell`Private`previewString]]], {-1, 0}, {-1, 
              0}], 
             Inset[
              CodeInspector`LinterUI`Private`lintSeverityCountsIconRow[
              LinterUIDockedCell`Private`cell], {1, 0}, {1, 0}]}, 
            ImageSize -> {300, 25}, AspectRatio -> Full, 
            PlotRange -> {{-1, 1}, {-1, 1}}, ImagePadding -> None] :> (
           SelectionMove[LinterUIDockedCell`Private`cell, All, Cell]; 
           With[{LinterUIDockedCell`Private`nb = 
              ParentNotebook[LinterUIDockedCell`Private`cell]}, 
             FrontEndExecute[
              FrontEnd`FrontEndToken[
              LinterUIDockedCell`Private`nb, "OpenSelectionParents"]]]; 
           SelectionMove[LinterUIDockedCell`Private`cell, After, Cell])], 
        LinterUIDockedCell`Private`$previewLength = 28, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`cell, 
            Blank[CellObject]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Apply[CodeInspector`LinterUI`Private`function, 
          Join[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`cell, 
             CodeInspector`LinterUI`Private`name]], 
           Hold[CodeInspector`LinterUI`Private`args]]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Condition[
            Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
             Blank[]], 
            MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
             Alternatives[
              Blank[CellObject], 
              Blank[NotebookObject]]]], All}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`cellOrNB] <> "*"]], Null, 
        CodeInspector`LinterUI`Private`applyToVar[
          Pattern[CodeInspector`LinterUI`Private`function, 
           Blank[]], {
           Pattern[CodeInspector`LinterUI`Private`notebook, 
            Blank[NotebookObject]], All, 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`args, 
           BlankNullSequence[]]] := 
        Map[Apply[CodeInspector`LinterUI`Private`function, 
           Join[
            ToHeldExpression[#], 
            Hold[CodeInspector`LinterUI`Private`args]]]& , 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`notebook] <> "*" <> 
           CodeInspector`LinterUI`Private`name]], 
        CodeInspector`LinterUI`Private`varValue[
          Condition[
           Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
            Blank[]], 
           MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
            Alternatives[
             Blank[CellObject], 
             Blank[NotebookObject]]]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cellOrNB, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Symbol[
          CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell, 
           CodeInspector`LinterUI`Private`lint, 
           CodeInspector`LinterUI`Private`name]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Condition[
           Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
            Blank[]], 
           MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
            Alternatives[
             Blank[CellObject], 
             Blank[NotebookObject]]]], All] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`cellOrNB] <> "*"]], Null, 
        CodeInspector`LinterUI`Private`varValue[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], All, 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := Map[Symbol, 
          Names[
          CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`notebook] <> "*" <> 
           CodeInspector`LinterUI`Private`name]], 
        CodeInspector`LinterUI`Private`varSet[{
           Condition[
            Pattern[CodeInspector`LinterUI`Private`cellOrNB, 
             Blank[]], 
            MatchQ[CodeInspector`LinterUI`Private`cellOrNB, 
             Alternatives[
              Blank[CellObject], 
              Blank[NotebookObject]]]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`cellOrNB, 
             CodeInspector`LinterUI`Private`name]], 
           CodeInspector`LinterUI`Private`value]], Null, 
        CodeInspector`LinterUI`Private`varSet[{
           Pattern[CodeInspector`LinterUI`Private`cell, 
            Blank[CellObject]], 
           Pattern[CodeInspector`LinterUI`Private`lint, 
            Blank[CodeInspector`InspectionObject]], 
           Pattern[CodeInspector`LinterUI`Private`name, 
            Blank[String]]}, 
          Pattern[CodeInspector`LinterUI`Private`value, 
           Blank[]]] := Apply[Set, 
          Append[
           ToHeldExpression[
            CodeInspector`LinterUI`Private`varNameString[
            CodeInspector`LinterUI`Private`cell, 
             CodeInspector`LinterUI`Private`lint, 
             CodeInspector`LinterUI`Private`name]], 
           CodeInspector`LinterUI`Private`value]], 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]]] := 
        "CodeInspector`LinterUI`Private`Vars`" <> "$$" <> 
         With[{CodeInspector`LinterUI`Private`nbID = 
            Last[CodeInspector`LinterUI`Private`notebook]}, 
           If[
            StringQ[CodeInspector`LinterUI`Private`nbID], 
            StringReplace[CodeInspector`LinterUI`Private`nbID, "-" -> "$"], 
            ToString[CodeInspector`LinterUI`Private`nbID]]] <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]]] := CodeInspector`LinterUI`Private`varNameString[
           Replace[
            ParentNotebook[CodeInspector`LinterUI`Private`cell], $Failed -> 
            EvaluationNotebook[]]] <> 
         With[{CodeInspector`LinterUI`Private`cellID = 
            First[CodeInspector`LinterUI`Private`cell]}, 
           If[
            StringQ[CodeInspector`LinterUI`Private`cellID], 
            StringReplace[CodeInspector`LinterUI`Private`cellID, "-" -> "$"], 
            
            ToString[CodeInspector`LinterUI`Private`cellID]]] <> "$$", Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`notebook, 
           Blank[NotebookObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`notebook] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> 
         CodeInspector`LinterUI`Private`name, Null, 
        CodeInspector`LinterUI`Private`varNameString[
          Pattern[CodeInspector`LinterUI`Private`cell, 
           Blank[CellObject]], 
          Pattern[CodeInspector`LinterUI`Private`lint, 
           Blank[CodeInspector`InspectionObject]], 
          Pattern[CodeInspector`LinterUI`Private`name, 
           Blank[String]]] := 
        CodeInspector`LinterUI`Private`varNameString[
          CodeInspector`LinterUI`Private`cell] <> Apply[Sequence, 
           Riffle[
            Map[StringDelete[
              ToString[#], 
              Alternatives["[", "]", "{", "}", ",", " "]]& , 
             CodeInspector`LinterUI`Private`extractFirstList[
              Last[CodeInspector`LinterUI`Private`lint][CodeParser`Source]]], 
            "$"]] <> "$$" <> CodeInspector`LinterUI`Private`name, 
        CodeInspector`LinterUI`Private`extractFirstList[
          Pattern[CodeInspector`LinterUI`Private`expr, 
           Blank[]]] := FirstCase[CodeInspector`LinterUI`Private`expr, 
          Blank[List], {}, {0, Infinity}]}; 
      LinterUIDockedCell`Private`notebook$$ = EvaluationNotebook[]), 
     UnsavedVariables :> {LinterUIDockedCell`Private`notebook$$}]], 
   CellFrame -> {{0, 0}, {1, 1}}, CellFrameMargins -> {{0, 0}, {0, 0}}, 
   CellFrameColor -> GrayLevel[0.85], Background -> GrayLevel[0.97], CellTags -> 
   "CodeAnalysisDockedCell"]},
Magnification:>1.5 Inherited,
FrontEndVersion->"13.0 for Mac OS X ARM (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7d5ed3fe-794f-4825-aa65-9446ffe4233d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 846, 14, 85, "Item",ExpressionUUID->"3df710d1-a80d-457e-8fd6-7caad1b0c7fb"],
Cell[CellGroupData[{
Cell[1429, 38, 811, 16, 85, "Item",ExpressionUUID->"dd98e3bf-e832-4a7a-951c-39f4849f8030"],
Cell[2243, 56, 3286, 114, 408, "Input",ExpressionUUID->"0136ef1a-5250-4669-b8a9-d7c7f624f965"],
Cell[5532, 172, 109, 2, 63, "Input",ExpressionUUID->"0ab9443a-d971-4f13-b48f-58950c527810"],
Cell[CellGroupData[{
Cell[5666, 178, 1321, 37, 281, "Input",ExpressionUUID->"88b9311e-8635-497f-be12-58aadc1d3a2e"],
Cell[6990, 217, 350, 11, 69, "Output",ExpressionUUID->"cb2b2222-52b6-4d91-bb50-6fa9a545dfe0"],
Cell[7343, 230, 393, 13, 69, "Output",ExpressionUUID->"3b752ce7-875e-4e5a-ad33-c1f0eba42fb3"],
Cell[7739, 245, 394, 13, 69, "Output",ExpressionUUID->"b30b2791-784d-40f1-8f11-aa784abece4a"],
Cell[8136, 260, 394, 13, 69, "Output",ExpressionUUID->"b66c085c-ceb8-4af2-9f0a-0d051e5e7929"]
}, Open  ]],
Cell[8545, 276, 374, 6, 63, "Input",ExpressionUUID->"9ebfcc53-227f-4b28-9141-9904b847e197"],
Cell[8922, 284, 249, 4, 63, "Input",ExpressionUUID->"127a04a3-af57-4b25-be91-af2ebc335dec"],
Cell[9174, 290, 249, 4, 63, "Input",ExpressionUUID->"93876924-ce9d-44c0-9abb-31b5015da5fb"],
Cell[9426, 296, 203, 4, 63, "Input",ExpressionUUID->"649d98c4-8e72-4d8a-93b8-75cafec33ae7"],
Cell[9632, 302, 304, 5, 46, "Input",ExpressionUUID->"739480e9-16d0-4bbe-a06f-69513c10ba0b"],
Cell[9939, 309, 246, 4, 63, "Input",ExpressionUUID->"237cc06d-2dae-46e4-af24-919af8c3bde5"],
Cell[10188, 315, 251, 4, 63, "Input",ExpressionUUID->"6fc3bba2-d4e7-4574-a9af-5da6fc7f635b"],
Cell[10442, 321, 249, 4, 63, InheritFromParent,ExpressionUUID->"20344c2a-4e13-47c9-91bb-2368d78b8794"],
Cell[10694, 327, 297, 5, 63, "Input",ExpressionUUID->"1350874b-58d2-4cc4-905b-077933c01ace"],
Cell[10994, 334, 468, 7, 63, "Input",ExpressionUUID->"a7c5113f-b397-4caf-8932-9a1b4d64404e"],
Cell[11465, 343, 205, 4, 63, "Input",ExpressionUUID->"12e1af44-33c0-4205-8ba0-78b30bae9761"],
Cell[11673, 349, 224, 4, 63, "Input",ExpressionUUID->"b61d9569-9274-432b-a458-716b30684a1c"],
Cell[11900, 355, 201, 4, 63, "Input",ExpressionUUID->"8b6444c2-5155-4d83-a880-7d48e5299b50"]
}, Open  ]],
Cell[12116, 362, 168, 3, 49, "Item",ExpressionUUID->"c2f7f96b-e6ef-4912-9961-b7089a768173"]
}
]
*)

(* End of internal cache information *)

